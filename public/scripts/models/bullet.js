// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.Bullet = (function(_super) {
  __extends(Bullet, _super);

  function Bullet(player) {
    this.player = player || game.players[0];
    this.player.ammo.machinegun--;
    Hud.update("ammo");
    this.shootInstance = createjs.Sound.play("audio/smg.m4a", "none", 0, 0, 0);
    this.px = -game.world.x + game.players[0].bitmap.x;
    this.py = -game.world.y + game.players[0].bitmap.y;
    this.mx = -game.world.x + game.mouseX;
    this.my = -game.world.y + game.mouseY;
    this.accuracy = .05;
    this.direction = Math.atan2(this.mx - this.px, this.my - this.py) + (Math.random() * (this.accuracy * 2) - this.accuracy);
    this.shape = new createjs.Shape();
    this.shape.rotation = -(this.direction * (180 / Math.PI) + 90);
    this.shape.alpha = .75;
    this.shape.graphics.beginFill("#FFFF00").drawRect(0, 0, 125, 2);
    this.shape.regx = 100;
    this.shape.regy = 1;
    this.shape.x = -game.world.x + game.players[0].bitmap.x;
    this.shape.y = -game.world.y + game.players[0].bitmap.y;
    game.world.addChild(this.shape);
    game.bullets.push(this);
  }

  Bullet.move = function(bullet) {
    var enemy, impactInstance, _i, _len, _ref;

    if (!(!bullet || bullet.shape.x > (window.innerWidth - game.world.x) || bullet.shape.x < -game.world.x || bullet.shape.y > (window.innerHeight - game.world.y) || bullet.shape.y < -game.world.y)) {
      _ref = game.enemies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        if (enemy && collision.checkRectCollision(bullet.shape, enemy.bitmap, 0, true)) {
          enemy.bitmap.x += Math.sin(bullet.direction) * 4;
          enemy.bitmap.y += Math.cos(bullet.direction) * 4;
          enemy.pause();
          impactInstance = createjs.Sound.play("audio/impact.m4a");
          impactInstance.setVolume(.25);
          if (enemy.health >= 1) {
            enemy.health -= 10;
          } else {
            console.log("" + bullet.player.name + " killed " + enemy.name);
            game.world.removeChild(enemy.bitmap);
            game.enemies.splice(game.enemies.indexOf(enemy), 1);
            new Drop(enemy);
          }
          game.bullets.splice(game.bullets.indexOf(bullet), 1);
          game.world.removeChild(bullet.shape);
        }
      }
      bullet.shape.x += Math.sin(bullet.direction) * 100;
      return bullet.shape.y += Math.cos(bullet.direction) * 100;
    } else if (bullet) {
      game.world.removeChild(bullet.shape);
      return game.bullets.splice(game.bullets.indexOf(bullet), 1);
    }
  };

  return Bullet;

})(Player);
