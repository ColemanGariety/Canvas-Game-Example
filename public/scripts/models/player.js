// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.Player = (function(_super) {
  __extends(Player, _super);

  function Player(name, isPuppet) {
    this.name = name || "Anon";
    console.log("" + this.name + " has joined.");
    this.isPuppet = isPuppet || false;
    this.spritesheet = new createjs.SpriteSheet({
      images: ["images/player.png"],
      frames: [[0, 111, 111, 111, 0, 55, 55], [111, 111, 111, 111, 0, 55, 55], [222, 111, 111, 111, 0, 55, 55], [333, 111, 111, 111, 0, 55, 55], [0, 555, 111, 111, 0, 55, 55], [111, 555, 111, 111, 0, 55, 55], [0, 888, 111, 111, 0, 55, 55], [111, 888, 111, 111, 0, 55, 55], [0, 444, 111, 111, 0, 55, 55], [111, 444, 111, 111, 0, 55, 55], [222, 444, 111, 111, 0, 55, 55], [333, 444, 111, 111, 0, 55, 55], [0, 777, 111, 111, 0, 55, 55], [111, 777, 111, 111, 0, 55, 55], [222, 777, 111, 111, 0, 55, 55], [333, 777, 111, 111, 0, 55, 55]],
      animations: {
        standd: {
          frames: [6, 7],
          frequency: 10
        },
        standu: {
          frames: [4, 5],
          frequency: 10
        },
        runu: {
          frames: [8, 9, 10, 11],
          frequency: 3
        },
        rund: {
          frames: [12, 13, 14, 15],
          frequency: 3
        },
        runr: {
          frames: [0, 1, 2, 3],
          frequency: 3
        }
      }
    });
    createjs.SpriteSheetUtils.addFlippedFrames(this.spritesheet, true);
    this.bitmap = new createjs.BitmapAnimation(this.spritesheet);
    if (isPuppet) {
      this.bitmap.x = window.innerWidth / 2;
      this.bitmap.y = window.innerHeight / 2;
    } else {
      this.bitmap.x = window.innerWidth / 2 + 100;
      this.bitmap.y = window.innerHeight / 2 + 100;
    }
    this.bitmap.gotoAndPlay("standd");
    this.actions = [];
    if (isPuppet) {
      game.stage.addChild(this.bitmap);
    } else {
      game.world.addChild(this.bitmap);
    }
    game.players.push(this);
  }

  Player.shoot = function(command, type) {
    if (command === "start") {
      return game.players[0].bulletInterval = setInterval(function() {
        var bullet;

        return bullet = new Bullet();
      }, 10);
    } else if (command === "stop") {
      return clearInterval(game.players[0].bulletInterval);
    }
  };

  Player.move = function() {
    if (game.players[0].actions.indexOf("runUp") !== -1) {
      if (game.players[0].bitmap.currentAnimation === "standd") {
        game.players[0].bitmap.gotoAndPlay("runu");
      }
      if ((game.world.y + 15) > 0) {
        game.players[0].bitmap.y -= 15;
      } else if (game.players[0].bitmap.y !== window.innerHeight / 2) {
        game.players[0].bitmap.y -= 15;
      } else {
        if (!collision.checkPixelCollision(game.players[0].bitmap, game.players[1].bitmap, 0, true)) {
          game.world.y += 15;
        }
      }
    }
    if (game.players[0].actions.indexOf("runDown") !== -1) {
      if (game.players[0].bitmap.currentAnimation === "standd") {
        game.players[0].bitmap.gotoAndPlay("rund");
      }
      if ((game.world.y - 15) < (-40000 + window.innerWidth)) {
        game.players[0].bitmap.y += 15;
      } else if (game.players[0].bitmap.y !== window.innerHeight / 2) {
        game.players[0].bitmap.y += 15;
      } else {
        if (!collision.checkPixelCollision(game.players[0].bitmap, game.players[1].bitmap, 0, true)) {
          game.world.y -= 15;
        }
      }
    }
    if (game.players[0].actions.indexOf("runLeft") !== -1) {
      if (game.players[0].bitmap.currentAnimation === "standd") {
        game.players[0].bitmap.gotoAndPlay("runr_h");
      }
      if ((game.world.x + 15) > 0) {
        game.players[0].bitmap.x -= 15;
      } else if (game.players[0].bitmap.x !== window.innerWidth / 2) {
        game.players[0].bitmap.x -= 15;
      } else {
        if (!collision.checkPixelCollision(game.players[0].bitmap, game.players[1].bitmap, 0, true)) {
          game.world.x += 15;
        }
      }
    }
    if (game.players[0].actions.indexOf("runRight") !== -1) {
      if (game.players[0].bitmap.currentAnimation === "standd") {
        game.players[0].bitmap.gotoAndPlay("runr");
      }
      if ((game.world.x - 15) < (-40000 + window.innerWidth)) {
        return game.players[0].bitmap.x += 15;
      } else if (game.players[0].bitmap.x !== window.innerWidth / 2) {
        return game.players[0].bitmap.x += 15;
      } else {
        if (!collision.checkPixelCollision(game.players[0].bitmap, game.players[1].bitmap, 0, true)) {
          return game.world.x -= 15;
        }
      }
    }
  };

  return Player;

})(Game);
