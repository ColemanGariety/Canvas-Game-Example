// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.Enemy = (function(_super) {
  __extends(Enemy, _super);

  Enemy.spritesheet = new createjs.SpriteSheet({
    images: ["images/corpse.png"],
    frames: [[0, 128, 128, 128, 0, 64, 64], [128, 128, 128, 128, 0, 64, 64], [256, 128, 128, 128, 0, 64, 64], [384, 128, 128, 128, 0, 64, 64], [0, 640, 128, 128, 0, 64, 64], [128, 640, 128, 128, 0, 64, 64], [0, 1024, 128, 128, 0, 64, 64], [128, 1024, 128, 128, 0, 64, 64], [0, 512, 128, 128, 0, 64, 64], [128, 512, 128, 128, 0, 64, 64], [256, 512, 128, 128, 0, 64, 64], [384, 512, 128, 128, 0, 64, 64], [0, 896, 128, 128, 0, 64, 64], [128, 896, 128, 128, 0, 64, 64], [256, 896, 128, 128, 0, 64, 64], [384, 896, 128, 128, 0, 64, 64]],
    animations: {
      standd: {
        frames: [6, 7],
        frequency: 75
      },
      standu: {
        frames: [4, 5],
        frequency: 75
      },
      runu: {
        frames: [8, 9, 10, 11],
        frequency: 50
      },
      rund: {
        frames: [12, 13, 14, 15],
        frequency: 50
      },
      runr: {
        frames: [0, 1, 2, 3],
        frequency: 50
      }
    }
  });

  createjs.SpriteSheetUtils.addFlippedFrames(Enemy.spritesheet, true);

  function Enemy(name, health, type, walker) {
    var _this = this;

    if (name) {
      this.name = "" + name + "'s Corpse";
    } else {
      this.name = "A Corpse";
    }
    this.pause = function() {
      _this.walker = false;
      return setTimeout(function() {
        return _this.walker = true;
      }, 2000);
    };
    this.destroy = function() {
      game.world.removeChild(_this.bitmap);
      return game.enemies.remove(_this);
    };
    this.walker = true;
    this.hurt = function(bullet) {
      var impactInstance;

      _this.bitmap.x += Math.sin(bullet.direction) * 4;
      _this.bitmap.y += Math.cos(bullet.direction) * 4;
      _this.pause();
      impactInstance = createjs.Sound.play("audio/impact.m4a");
      impactInstance.setVolume(.25);
      if (_this.health >= 1) {
        return _this.health -= 10;
      } else {
        return _this.kill(bullet);
      }
    };
    this.kill = function(bullet) {
      console.log("" + bullet.player.name + " killed " + _this.name);
      game.world.removeChild(_this.bitmap);
      game.enemies.remove(_this);
      return new Drop(_this);
    };
    this.health = health || 100;
    this.type = type || "corpse";
    console.log("" + this.name + " gets up and moves");
    this.bitmap = new createjs.BitmapAnimation(Enemy.spritesheet);
    this.bitmap.x = Math.floor(Math.random() * (4000 - 0 + 1)) + 0;
    this.bitmap.y = Math.floor(Math.random() * (4000 - 0 + 1)) + 0;
    this.bitmap.gotoAndPlay("standd");
    this.actions = [];
    game.world.addChild(this.bitmap);
    game.enemies.push(this);
  }

  Enemy.move = function(enemy) {
    var ex, ey, px, py, x, y;

    if (enemy.walker === true) {
      px = -game.world.x + game.players[0].bitmap.x;
      py = -game.world.y + game.players[0].bitmap.y;
      ex = enemy.bitmap.x;
      ey = enemy.bitmap.y;
      enemy.direction = Math.atan2(px - ex, py - ey);
      x = Math.sin(enemy.direction) / 2;
      y = Math.cos(enemy.direction) / 2;
      enemy.bitmap.x += x;
      enemy.bitmap.y += y;
      if (enemy.direction > 2.5 || enemy.direction < -2.5) {
        if (enemy.bitmap.currentAnimation !== "runu") {
          return enemy.bitmap.gotoAndPlay("runu");
        }
      } else if (enemy.direction > .75) {
        if (enemy.bitmap.currentAnimation !== "runr") {
          return enemy.bitmap.gotoAndPlay("runr");
        }
      } else if (enemy.direction > -.75) {
        if (enemy.bitmap.currentAnimation !== "rund") {
          return enemy.bitmap.gotoAndPlay("rund");
        }
      } else {
        if (enemy.bitmap.currentAnimation !== "runr_h") {
          return enemy.bitmap.gotoAndPlay("runr_h");
        }
      }
    }
  };

  return Enemy;

})(Game);
