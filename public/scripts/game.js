// Generated by CoffeeScript 1.6.2
var Game;

Game = (function() {
  function Game(canvasId) {
    var handleLoad, resizeCanvas,
      _this = this;

    this.stage = new createjs.Stage(canvasId);
    console.log("Started the game.");
    this.world = new createjs.Container();
    this.stage.addChild(this.world);
    handleLoad = function(event) {
      var instance;

      instance = createjs.Sound.play("ragevalley");
      return instance.setVolume(0.15);
    };
    createjs.Sound.addEventListener("fileload", handleLoad);
    createjs.Sound.registerSound("audio/rage.mp3", "ragevalley");
    this.players = [];
    this.bullets = [];
    this.enemies = [];
    resizeCanvas = function() {
      _this.stage.canvas.width = window.innerWidth;
      _this.stage.canvas.height = window.innerHeight;
      if (_this.players[0]) {
        _this.players[0].bitmap.x = window.innerWidth / 2;
        _this.players[0].bitmap.y = window.innerHeight / 2;
      }
      return _this.stage.update();
    };
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    createjs.Ticker.setFPS(60);
    createjs.Ticker.addEventListener("tick", function() {
      var bullet, enemy, _i, _j, _len, _len1, _ref, _ref1;

      Player.move();
      _ref = _this.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        Bullet.move(bullet);
      }
      _ref1 = _this.enemies;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        enemy = _ref1[_j];
        Enemy.move(enemy);
      }
      return _this.stage.update();
    });
    document.oncontextmenu = function(e) {
      e.preventDefault();
      return createjs.Sound.play("/audio/reload.mp3");
    };
    document.onmousedown = function(e) {
      var doMouse;

      doMouse = function(e) {
        if (e.pageX || e.pageY) {
          _this.posx = e.pageX;
          return _this.posy = e.pageY;
        } else if (e.clientX || e.clientY) {
          _this.posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
          return _this.posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
      };
      doMouse(e);
      switch (e.which) {
        case 1:
          if (e.pageX || e.pageY) {
            _this.posx = e.pageX;
            _this.posy = e.pageY;
          } else if (e.clientX || e.clientY) {
            _this.posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            _this.posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
          }
          if (_this.players[0].actions.indexOf("shoot") === -1) {
            Player.shoot("start");
          }
          _this.shootInstance = createjs.Sound.play("audio/smg.m4a", "none", 0, 0, -1);
          _this.players[0].actions.push("shoot");
      }
      return document.onmousemove = function(e) {
        return doMouse(e);
      };
    };
    document.onmouseup = function(e) {
      switch (e.which) {
        case 1:
          Player.shoot("stop");
          _this.shootInstance.stop("audio/smg.m4a", "none", 0, 0, 0);
          return _this.players[0].actions.splice(_this.players[0].actions.indexOf("shoot"), 1);
      }
    };
    document.onkeydown = function(e) {
      switch (e.which) {
        case 87:
          if (_this.players[0].actions.indexOf("runUp") === -1) {
            return _this.players[0].actions.push("runUp");
          }
          break;
        case 83:
          if (_this.players[0].actions.indexOf("runDown") === -1) {
            return _this.players[0].actions.push("runDown");
          }
          break;
        case 65:
          if (_this.players[0].actions.indexOf("runLeft") === -1) {
            return _this.players[0].actions.push("runLeft");
          }
          break;
        case 68:
          if (_this.players[0].actions.indexOf("runRight") === -1) {
            return _this.players[0].actions.push("runRight");
          }
      }
    };
    document.onkeyup = function(e) {
      switch (e.which) {
        case 87:
          _this.players[0].actions.splice(_this.players[0].actions.indexOf("runUp"), 1);
          return _this.players[0].bitmap.gotoAndPlay("standd");
        case 83:
          _this.players[0].actions.splice(_this.players[0].actions.indexOf("runDown"), 1);
          return _this.players[0].bitmap.gotoAndPlay("standd");
        case 65:
          _this.players[0].actions.splice(_this.players[0].actions.indexOf("runLeft"), 1);
          return _this.players[0].bitmap.gotoAndPlay("standd");
        case 68:
          _this.players[0].actions.splice(_this.players[0].actions.indexOf("runRight"), 1);
          return _this.players[0].bitmap.gotoAndPlay("standd");
      }
    };
  }

  return Game;

})();

if (typeof window !== "undefined" && window !== null) {
  window.Game = Game;
} else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
  module.exports = Game;
}
