// Generated by CoffeeScript 1.6.2
(function() {
  var Continent, Game, Player, game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function() {
    function Game(canvasId) {
      var handleLoad, resizeCanvas,
        _this = this;

      this.stage = new createjs.Stage(canvasId);
      console.log("Started the game.");
      this.world = new createjs.Container();
      this.stage.addChild(this.world);
      handleLoad = function(event) {
        return instance.setVolume(0.25);
      };
      createjs.Sound.addEventListener("fileload", handleLoad);
      createjs.Sound.registerSound("audio/rage.mp3", "ragevalley");
      this.players = [];
      resizeCanvas = function() {
        _this.stage.canvas.width = window.innerWidth;
        _this.stage.canvas.height = window.innerHeight;
        if (_this.players[0]) {
          _this.players[0].bitmap.x = window.innerWidth / 2;
          _this.players[0].bitmap.y = window.innerHeight / 2;
        }
        return _this.stage.update();
      };
      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);
      createjs.Ticker.setFPS(30);
      createjs.Ticker.addEventListener("tick", function() {
        var player, _i, _len, _ref;

        _ref = _this.players;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          player = _ref[_i];
          if (player.actions.movement.up === true) {
            if (_this.players[0].bitmap.currentAnimation === "standd") {
              _this.players[0].bitmap.gotoAndPlay("runu");
            }
            if ((_this.world.y + 15) > 0) {
              _this.players[0].bitmap.y -= 15;
            } else if (game.players[0].bitmap.y !== window.innerHeight / 2) {
              _this.players[0].bitmap.y -= 15;
            } else {
              if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
                _this.world.y += 15;
              }
            }
          }
          if (player.actions.movement.down === true) {
            if (_this.players[0].bitmap.currentAnimation === "standd") {
              _this.players[0].bitmap.gotoAndPlay("rund");
            }
            if ((_this.world.y - 15) < (-40000 + window.innerWidth)) {
              _this.players[0].bitmap.y += 15;
            } else if (game.players[0].bitmap.y !== window.innerHeight / 2) {
              _this.players[0].bitmap.y += 15;
            } else {
              if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
                _this.world.y -= 15;
              }
            }
          }
          if (player.actions.movement.left === true) {
            if (_this.players[0].bitmap.currentAnimation === "standd") {
              _this.players[0].bitmap.gotoAndPlay("runr_h");
            }
            if ((_this.world.x + 15) > 0) {
              _this.players[0].bitmap.x -= 15;
            } else if (game.players[0].bitmap.x !== window.innerWidth / 2) {
              _this.players[0].bitmap.x -= 15;
            } else {
              if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
                _this.world.x += 15;
              }
            }
          }
          if (player.actions.movement.right === true) {
            if (_this.players[0].bitmap.currentAnimation === "standd") {
              _this.players[0].bitmap.gotoAndPlay("runr");
            }
            if ((_this.world.x - 15) < (-40000 + window.innerWidth)) {
              _this.players[0].bitmap.x += 15;
            } else if (game.players[0].bitmap.x !== window.innerWidth / 2) {
              _this.players[0].bitmap.x += 15;
            } else {
              if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
                _this.world.x -= 15;
              }
            }
          }
        }
        return _this.stage.update();
      });
      document.oncontextmenu = function(e) {
        e.preventDefault();
        return createjs.Sound.play("/audio/reload.mp3");
      };
      document.onmousedown = function(e) {
        switch (e.which) {
          case 1:
            _this.shootInstance = createjs.Sound.play("audio/smg.m4a", "none", 0, 0, -1);
            return _this.players[0].actions.weapons.shooting.automatic = true;
        }
      };
      document.onmouseup = function(e) {
        switch (e.which) {
          case 1:
            _this.shootInstance.stop("audio/smg.m4a", "none", 0, 0, 0);
            return _this.players[0].actions.weapons.shooting.automatic = false;
        }
      };
      document.onkeydown = function(e) {
        switch (e.which) {
          case 87:
            return _this.players[0].actions.movement.up = true;
          case 83:
            return _this.players[0].actions.movement.down = true;
          case 65:
            return _this.players[0].actions.movement.left = true;
          case 68:
            return _this.players[0].actions.movement.right = true;
        }
      };
      document.onkeyup = function(e) {
        switch (e.which) {
          case 87:
            _this.players[0].actions.movement.up = false;
            return _this.players[0].bitmap.gotoAndPlay("standd");
          case 83:
            _this.players[0].actions.movement.down = false;
            return _this.players[0].bitmap.gotoAndPlay("standd");
          case 65:
            _this.players[0].actions.movement.left = false;
            return _this.players[0].bitmap.gotoAndPlay("standd");
          case 68:
            _this.players[0].actions.movement.right = false;
            return _this.players[0].bitmap.gotoAndPlay("standd");
        }
      };
    }

    return Game;

  })();

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(name, isPuppet) {
      this.name = name || "Anon";
      console.log("" + this.name + " has joined.");
      this.isPuppet = isPuppet || false;
      this.spritesheet = new createjs.SpriteSheet({
        images: ["images/player.png"],
        frames: [[0, 111, 111, 111, 0, 55, 55], [111, 111, 111, 111, 0, 55, 55], [222, 111, 111, 111, 0, 55, 55], [333, 111, 111, 111, 0, 55, 55], [0, 555, 111, 111, 0, 55, 55], [111, 555, 111, 111, 0, 55, 55], [0, 888, 111, 111, 0, 55, 55], [111, 888, 111, 111, 0, 55, 55], [0, 444, 111, 111, 0, 55, 55], [111, 444, 111, 111, 0, 55, 55], [222, 444, 111, 111, 0, 55, 55], [333, 444, 111, 111, 0, 55, 55], [0, 777, 111, 111, 0, 55, 55], [111, 777, 111, 111, 0, 55, 55], [222, 777, 111, 111, 0, 55, 55], [333, 777, 111, 111, 0, 55, 55]],
        animations: {
          standd: {
            frames: [6, 7],
            frequency: 10
          },
          standu: {
            frames: [4, 5],
            frequency: 10
          },
          runu: {
            frames: [8, 9, 10, 11],
            frequency: 3
          },
          rund: {
            frames: [12, 13, 14, 15],
            frequency: 3
          },
          runr: {
            frames: [0, 1, 2, 3],
            frequency: 3
          }
        }
      });
      createjs.SpriteSheetUtils.addFlippedFrames(this.spritesheet, true);
      this.bitmap = new createjs.BitmapAnimation(this.spritesheet);
      if (isPuppet) {
        this.bitmap.x = window.innerWidth / 2;
        this.bitmap.y = window.innerHeight / 2;
      } else {
        this.bitmap.x = window.innerWidth / 2 + 100;
        this.bitmap.y = window.innerHeight / 2 + 100;
      }
      this.bitmap.regX = 50;
      this.bitmap.regY = 53;
      this.bitmap.gotoAndPlay("standd");
      this.actions = {
        movement: {
          up: false,
          down: false,
          left: false,
          right: false
        },
        weapons: {
          shooting: {
            automatic: false,
            manual: false
          }
        }
      };
      if (isPuppet) {
        game.stage.addChild(this.bitmap);
      } else {
        game.world.addChild(this.bitmap);
      }
      game.players.push(this);
    }

    return Player;

  })(Game);

  Continent = (function(_super) {
    __extends(Continent, _super);

    function Continent(name) {
      this.name = name || "Homeland";
      this.x = 0;
      this.y = 0;
      this.bitmap = new Image();
      this.bitmap.src = "images/grass.jpg";
      this.shape = new createjs.Shape();
      this.shape.graphics.beginBitmapFill(this.bitmap, "repeat").drawRect(0, 0, 40000, 40000);
      game.world.addChild(this.shape);
    }

    return Continent;

  })(Game);

  game = new Game("gameCanvas");

  new Continent();

  new Player("Jackson", true);

  new Player("Elliot", false);

  if (typeof window !== "undefined" && window !== null) {
    window.Game = Game;
  } else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = Game;
  }

}).call(this);
