// Generated by CoffeeScript 1.6.1
var Continent, Game, Player, game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = (function() {

  function Game(canvasId) {
    var resizeCanvas,
      _this = this;
    this.stage = new createjs.Stage(canvasId);
    console.log("Started the game.");
    this.world = new createjs.Container();
    this.stage.addChild(this.world);
    this.players = [];
    resizeCanvas = function() {
      _this.stage.canvas.width = window.innerWidth;
      _this.stage.canvas.height = window.innerHeight;
      if (_this.players[0]) {
        _this.players[0].bitmap.x = window.innerWidth / 2;
        _this.players[0].bitmap.y = window.innerHeight / 2;
      }
      return _this.stage.update();
    };
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    createjs.Ticker.setFPS(30);
    createjs.Ticker.addEventListener("tick", function() {
      var player, _i, _len, _ref;
      _ref = _this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.actions.movement.up === true) {
          if ((_this.world.y + 15) > 0) {
            _this.players[0].bitmap.y -= 15;
          } else if (game.players[0].bitmap.y !== window.innerHeight / 2) {
            _this.players[0].bitmap.y -= 15;
          } else {
            if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
              _this.world.y += 15;
            }
          }
        }
        if (player.actions.movement.down === true) {
          if ((_this.world.y - 15) < (-4000 + window.innerWidth)) {
            _this.players[0].bitmap.y += 15;
          } else if (game.players[0].bitmap.y !== window.innerHeight / 2) {
            _this.players[0].bitmap.y += 15;
          } else {
            if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
              _this.world.y -= 15;
            }
          }
        }
        if (player.actions.movement.left === true) {
          if ((_this.world.x + 15) > 0) {
            _this.players[0].bitmap.x -= 15;
          } else if (game.players[0].bitmap.x !== window.innerWidth / 2) {
            _this.players[0].bitmap.x -= 15;
          } else {
            if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
              _this.world.x += 15;
            }
          }
        }
        if (player.actions.movement.right === true) {
          if ((_this.world.x - 15) < (-4000 + window.innerWidth)) {
            _this.players[0].bitmap.x += 15;
          } else if (game.players[0].bitmap.x !== window.innerWidth / 2) {
            _this.players[0].bitmap.x += 15;
          } else {
            if (!collision.checkPixelCollision(_this.players[0].bitmap, _this.players[1].bitmap, 0, true)) {
              _this.world.x -= 15;
            }
          }
        }
      }
      return _this.stage.update();
    });
    document.oncontextmenu = function(e) {
      e.preventDefault();
      return createjs.Sound.play("/audio/reload.mp3");
    };
    document.onkeydown = function(e) {
      switch (e.which) {
        case 87:
          return _this.players[0].actions.movement.up = true;
        case 83:
          return _this.players[0].actions.movement.down = true;
        case 65:
          return _this.players[0].actions.movement.left = true;
        case 68:
          return _this.players[0].actions.movement.right = true;
      }
    };
    document.onkeyup = function(e) {
      switch (e.which) {
        case 87:
          return _this.players[0].actions.movement.up = false;
        case 83:
          return _this.players[0].actions.movement.down = false;
        case 65:
          return _this.players[0].actions.movement.left = false;
        case 68:
          return _this.players[0].actions.movement.right = false;
      }
    };
  }

  return Game;

})();

Player = (function(_super) {

  __extends(Player, _super);

  function Player(name, isPuppet) {
    this.name = name || "Anon";
    console.log("" + this.name + " has joined.");
    this.isPuppet = isPuppet || false;
    this.spritesheet = new createjs.SpriteSheet({
      images: ["images/player.png"],
      frames: {
        width: 100,
        height: 106
      },
      animations: {
        stand: [0],
        run: {
          frames: [0, 1],
          frequency: 2
        }
      }
    });
    this.bitmap = new createjs.BitmapAnimation(this.spritesheet);
    if (isPuppet) {
      this.bitmap.x = window.innerWidth / 2;
      this.bitmap.y = window.innerHeight / 2;
    } else {
      this.bitmap.x = window.innerWidth / 2 + 100;
      this.bitmap.y = window.innerHeight / 2 + 100;
    }
    this.bitmap.regX = 50;
    this.bitmap.regY = 53;
    this.bitmap.gotoAndPlay("stand");
    this.actions = {
      movement: {
        up: false,
        down: false,
        left: false,
        right: false
      }
    };
    if (isPuppet) {
      game.stage.addChild(this.bitmap);
    } else {
      game.world.addChild(this.bitmap);
    }
    game.players.push(this);
  }

  return Player;

})(Game);

Continent = (function(_super) {

  __extends(Continent, _super);

  function Continent(name) {
    this.name = name || "Homeland";
    this.x = 0;
    this.y = 0;
    this.bitmap = new Image();
    this.bitmap.src = "images/grass.jpg";
    this.shape = new createjs.Shape();
    this.shape.graphics.beginBitmapFill(this.bitmap, "repeat").drawRect(0, 0, 4000, 4000);
    game.world.addChild(this.shape);
  }

  return Continent;

})(Game);

game = new Game("gameCanvas");

new Continent();

new Player("Jackson", true);

new Player("Elliot", false);

if (typeof window !== "undefined" && window !== null) {
  window.Game = Game;
} else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
  module.exports = Game;
}
